【【【gradle学习笔记】】】 

项目管理工具
gradle的灵魂：Project 与Task
Project为Task提供了执行的容器和上下文
任何一个 Gradle 构建都是由一个或多个 projects 组成。每个 project 包括许多可构建组成部分。 这完全取决于你要构建些什么。
 Gradle 的 build-by-convention 可以让您来具体定义一个 project 到底该做什么。
Task案例


你可以通过在命令行运行 gradle 命令来执行构建，gradle 命令会从当前目录下寻找 build.gradle 文件来执行构建。
我们称 build.gradle 文件为构建脚本。严格来说这其实是一个构建配置脚本，后面你会了解到这个构建脚本定义了一个 project 和一些默认的 task。

和maven一样，gradle只是提供了构建项目的一个框架，真正起作用的是Plugin,他默认提供了很多框架，，gradle不提供内建的项目生命周期管理，只是提供了
很多task ，这些task依次执行，为我们营造了一种如maven般的项目构建周期

gradle是一种声明式的构建工具，在执行时，它不会顺序执行build.gradle中的内容，而是分为两个阶段，第一个阶段是配置阶段，然后才是实际执行阶段

配置阶段：gradle将读取build.gradle中的所有内容来配置project与task，比如配置project与task的property，处理task的依赖等

groovy语言的两个概念，一个是bean，一个是groovy闭包的delegate(委托)机制

build.gradle的真正任务是配置一个project的实例，在执行build的脚本之前，gradle会为我们准备好一个project的实例，执行完脚本之后，gradle会按照DAG（有向无环图）依次执行任务

【【【gradle wrapper】】】
是对gradle的一种包装，便于在团队开发中统一gradle构建的脚本，然后提交到git上，然后别人可以下载下来，这样大家就可以使用统一的gradle版本进行构建，
避免因为gradle版本不统一带来的不必要的问题，gradle内置了wrapper的task，我们可以命令行下执行

gradle 可以在没有安装gradle的情况下使用，这时候就需要gradle wrapper了，它其实是一个脚本文件，它会在你没有安装gradle的情况下为我们下载gradle
		
