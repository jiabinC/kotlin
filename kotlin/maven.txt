Maven是什么 ::
Maven 是一个项目管理工具。它负责管理项目开发过程中的几乎所有的东西。
maven把项目的构建划分为不同的生命周期(lifecycle)。粗略一点的话，它这个过程(phase)包括：编译、测试、打包、集成测试、验证、部署。
maven中所有的执行动作(goal)都需要指明自己在这个过程中的执行位置，然后maven执行的时候，就依照过程的发展依次调用这些goal进行各种处理。

Maven的标准工程结构如下 ::
|-- pom.xml(maven的核心配置文件)
|-- src
|-- main
|   `-- java(java源代码目录)
|   `-- resources(资源文件目录)
|-- test
        `-- java(单元测试代码目录)
|-- target(输出目录，所有的输出物都存放在这个目录下)
    |--classes(编译后的class文件存放处)
	
	
Maven的"约定优于配置" ::
每一个阶段的任务都知道怎么正确完成自己的工作，比如compile任务就知道从src/main/java下编译所有的java文件，并把它的输出class文件存放到target/classes中。

Maven的版本规范 ::
groudId
团体、组织的标识符。团体标识的约定是，它以创建这个项目的组织名称的逆向域名(reverse domain name)开头。一般对应着JAVA的包的结构。例如org.apache
artifactId 
单独项目的唯一标识符。比如我们的tomcat, commons等。不要在artifactId中包含点号(.)。
version 
一个项目的特定版本。
packaging 
项目的类型，默认是jar，描述了项目打包后的输出。类型为jar的项目产生一个JAR文件，类型为war的项目产生一个web应用。


SNAPSHOT
这个版本一般用于开发过程中，表示不稳定的版本。
LATEST
指某个特定构件的最新发布，这个发布可能是一个发布版，也可能是一个snapshot版，具体看哪个时间最后。
RELEASE
指最后一个发布版。

本地仓储配置
从中央仓库下载的jar包，都会统一存放到本地仓库中。我们需要配置本地仓库的位置。
打开maven安装目录，打开conf目录下的setting.xml文件。
可以参照下图配置本地仓储位置。

如何添加外部依赖jar包
在Maven工程中添加依赖jar包，很简单，只要在POM文件中引入对应的<dependency>标签即可。
<dependency>标签最常用的四个属性标签：
groupId：项目组织唯一的标识符，实际对应JAVA的包的结构。
artifactId：项目唯一的标识符，实际对应项目的名称，就是项目根目录的名称。
version：jar包的版本号。可以直接填版本数字，也可以在properties标签中设置属性值。
scope：jar包的作用范围。可以填写compile、runtime、test、system和provided。用来在编译、测试等场景下选择对应的classpath。

如何寻找jar包
可以在http://mvnrepository.com/站点搜寻你想要的jar包版本











